@page "/workflows/create"
@page "/projects/{projectId:guid}/workflows/create"
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer
@inject IWorkflowApiService WorkflowApi
@inject IProjectApiService ProjectApi
@inject NavigationManager Navigation

<PageTitle>Create Workflow</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h4 class="mb-0">
                        <i class="bi bi-plus-circle"></i>
                        Create New Workflow
                        @if (selectedProject != null)
                        {
                            <small class="text-muted">in @selectedProject.Name</small>
                        }
                    </h4>
                </div>
                <div class="card-body">
                    <EditForm EditContext="@editContext" OnValidSubmit="@HandleValidSubmit" FormName="CreateWorkflowForm">
                        <DataAnnotationsValidator />
                        <!-- Project Selection (only show if not coming from project page) -->
                        @if (ProjectId == null)
                        {
                            @if (projects == null)
                            {
                                <p><em>Loading projects...</em></p>
                            }
                            else
                            {
                                <div class="mb-3">
                                    <label for="projectSelect" class="form-label">Project</label>
                                    <select id="projectSelect" class="form-select"
                                            @bind="selectedProjectId"
                                            @bind:event="onchange"
                                            @bind:after="OnProjectChanged">
                                        <option value="">No Project (Standalone Workflow)</option>
                                        @foreach (var project in projects)
                                        {
                                            <option value="@project.Id">@project.Name (@project.ServiceName)</option>
                                        }
                                    </select>
                                </div>
                            }

                        }

                        <!-- Workflow Type selection moved before Title/Config Name -->
                        <div class="mb-3">
                            <label for="workflowType" class="form-label">Workflow Type</label>
                            <select id="workflowType" class="form-select" @onchange="OnWorkflowTypeChanged">
                                @foreach (var type in GetFilteredWorkflowTypes())
                                {
                                    <option value="@type.ToString()" selected="@(model.WorkflowType == type)">
                                        @type.ToString()
                                    </option>
                                }
                            </select>
                        </div>

                        <div class="mb-3">
                            <label for="titleInput" class="form-label">Title</label>
                            <InputText id="titleInput"
                                        class="form-control"
                                        @bind-Value="model.ConfigurationName" />
                            <ValidationMessage For="@(() => model.ConfigurationName)" />
                        </div>

                        @if (model.WorkflowType == WorkflowType.CodeUpdate)
                        {
                            <div class="mb-4">
                                <div class="card">
                                    <div class="card-header">
                                        <h6 class="mb-0">
                                            <i class="bi bi-list-task"></i> Code Update Stages
                                        </h6>
                                    </div>
                                    <div class="card-body">
                                        <ul class="list-group">
                                            @foreach (var stage in codeUpdateModel.Stages)
                                            {
                                                <li class="list-group-item">@stage.Name</li>
                                            }
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        }

                        @if (model.WorkflowType == WorkflowType.ArchiveOnly)
                        {
                            <div class="mb-4">
                                <div class="card">
                                    <div class="card-header">
                                        <h6 class="mb-0">
                                            <i class="bi bi-gear"></i> Stage Configuration
                                            <small class="text-muted">- Define the stages for traffic reduction</small>
                                        </h6>
                                    </div>

                                    <div class="card-body">
                                        <p class="text-muted small mb-3">
                                            Configure the stages in the order you want to reduce traffic (typically: Production → Test → Development).
                                            Each stage can have different allocation percentages and wait times.
                                        </p>

                                        @foreach (var stage in archiveStages.Select((stage, index) => new { stage, index }))
                                        {
                                            <div class="border rounded p-3 mb-3 @(stage.index == 0 ? "border-primary" : "border-secondary")">
                                                <div class="row align-items-center">

                                                    <div class="col-md-3">
                                                        <label class="form-label">Stage Name</label>
                                                        <input type="text" class="form-control" @bind="stage.stage.Name" placeholder="e.g., Production" />
                                                    </div>

                                                    <div class="col-md-2">
                                                        <label class="form-label">Current %</label>
                                                        <input type="number" class="form-control" @bind="stage.stage.CurrentPercentage" min="0" max="100" />
                                                    </div>

                                                    <div class="col-md-2">
                                                        <label class="form-label">Target %</label>
                                                        <input type="number" class="form-control" @bind="stage.stage.TargetPercentage" min="0" max="100" />
                                                    </div>

                                                    <div class="col-md-2">
                                                        <label class="form-label">Wait Hours</label>
                                                        <input type="number" class="form-control" @bind="stage.stage.WaitHours" min="0" max="168" step="0.5" />
                                                    </div>

                                                    <div class="col-md-2">
                                                        <label class="form-label">Actions</label>
                                                        <div class="btn-group w-100" role="group">
                                                            @if (stage.index > 0)
                                                            {
                                                                <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="() => MoveStageUp(stage.index)" title="Move Up">
                                                                    <i class="bi bi-arrow-up"></i>
                                                                </button>
                                                            }

                                                            @if (archiveStages.Count > 1)
                                                            {
                                                                <button type="button" class="btn btn-outline-danger btn-sm" @onclick="() => RemoveStage(stage.stage)" title="Remove">
                                                                    <i class="bi bi-trash"></i>
                                                                </button>
                                                            }

                                                            @if (stage.index < archiveStages.Count - 1)
                                                            {
                                                                <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="() => MoveStageDown(stage.index)" title="Move Down">
                                                                    <i class="bi bi-arrow-down"></i>
                                                                </button>
                                                            }
                                                        </div>
                                                    </div>

                                                </div>

                                                @if (stage.index == 0)
                                                {
                                                    <small class="text-primary">
                                                        <i class="bi bi-info-circle"></i> This will be the first stage to process
                                                    </small>
                                                }
                                            </div>
                                        }

                                        <div class="d-flex justify-content-between align-items-center mt-3">
                                            <button type="button" class="btn btn-outline-success btn-sm" @onclick="AddStage">
                                                <i class="bi bi-plus"></i> Add Stage
                                            </button>

                                            <div class="btn-group">
                                                <button type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                                    <i class="bi bi-lightning"></i> Quick Setup
                                                </button>
                                                <ul class="dropdown-menu">
                                                    <li>
                                                        <button class="dropdown-item" type="button" @onclick='() => SetupTemplate("standard")'>
                                                            Standard (Prod → Test → Dev)
                                                        </button>
                                                    </li>
                                                    <li>
                                                        <button class="dropdown-item" type="button" @onclick='() => SetupTemplate("simple")'>
                                                            Simple (Prod → Dev)
                                                        </button>
                                                    </li>
                                                    <li>
                                                        <button class="dropdown-item" type="button" @onclick='() => SetupTemplate("gradual")'>
                                                            Gradual (Prod 100→50→0)
                                                        </button>
                                                    </li>
                                                </ul>
                                            </div>
                                        </div>

                                        @if (archiveStages.Any())
                                        {
                                            <div class="mt-3 p-2 bg-light rounded">
                                                <small class="text-muted">
                                                    <strong>Preview:</strong>
                                                    @string.Join(" → ", archiveStages.Select(s => $"{s.Name} ({s.CurrentPercentage}%→{s.TargetPercentage}%, wait {s.WaitHours}h)"))
                                                </small>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <InputTextArea id="description" class="form-control" @bind-Value="model.Description"
                                           rows="3" placeholder="Optional description of this workflow..." />
                            <ValidationMessage For="@(() => model.Description)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Metadata</label>
                            @foreach (var metadata in metadataItems)
                            {
                                <div class="input-group mb-2">
                                    <input type="text" class="form-control" @bind="metadata.Key" placeholder="Key" />
                                    <input type="text" class="form-control" @bind="metadata.Value" placeholder="Value" />
                                    <button type="button" class="btn btn-outline-danger" @onclick="() => RemoveMetadata(metadata)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            }
                            <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="AddMetadata">
                                <i class="bi bi-plus"></i> Add Metadata
                            </button>
                        </div>

                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-secondary" @onclick="Cancel">
                                <i class="bi bi-x-circle"></i> Cancel
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                <i class="bi bi-check-circle"></i> Create Workflow
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>

            <div class="card mt-4">
                <div class="card-header">
                    <h6 class="mb-0">Workflow Type Information</h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <strong>Archive Only</strong>
                            <p class="small">Gradually reduces traffic (100% → 80% → wait → 0%) then archives the configuration.</p>
                        </div>
                        <div class="col-md-4">
                            <strong>Code First</strong>
                            <p class="small">Creates PR to remove configuration from code, waits for review/merge/deployment, then archives.</p>
                        </div>
                        <div class="col-md-4">
                            <strong>Transform to Default</strong>
                            <p class="small">Single action that transforms the configuration to default values immediately.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public Guid? ProjectId { get; set; }
    private List<ArchiveStageModel> archiveStages = new();

    private CreateWorkflowRequest model = new();
    private CodeUpdateWorkflowRequest codeUpdateModel = new();
    private List<MetadataItem> metadataItems = new() { new MetadataItem() };
    private bool isSubmitting = false;
    private bool showValidationMessages = false;
    private ValidationMessageStore messageStore;


    private List<ProjectResponse>? projects;
    private ProjectResponse? selectedProject;
    private string selectedProjectIdBacking = "";
    private string selectedProjectId
    {
        get => selectedProjectIdBacking;
        set
        {
            if (selectedProjectIdBacking != value)
            {
                selectedProjectIdBacking = value;
                // Find the selected project by matching the string value to the Guid
                if (Guid.TryParse(selectedProjectIdBacking, out var selectedGuid))
                {
                    selectedProject = projects?.FirstOrDefault(p => p.Id == selectedGuid);
                    selectedProjectType = selectedProject?.Type;
                }
                else
                {
                    selectedProject = null;
                    selectedProjectType = null;
                }
                // Any other logic you want to run on change
            }
        }
    }

    private void OnNameChanged(string newValue)
    {
        if (model.WorkflowType == WorkflowType.CodeUpdate)
        {
            codeUpdateModel.Title = newValue;
        }
        else
        {
            model.ConfigurationName = newValue;
        }
    }


    private EditContext editContext;

    protected override void OnInitialized()
    {
        editContext = new EditContext(model);
        messageStore = new ValidationMessageStore(editContext);
    }



    private readonly List<string> codeUpdateStages = new()
    {
        "PR In Progress",
        "PR Review",
        "Deployment InProgress",
        "Deployment Done"
    };

    public class MetadataItem
    {
        public string Key { get; set; } = "";
        public string Value { get; set; } = "";
    }

    private ProjectType? selectedProjectType;

    protected override async Task OnInitializedAsync()
    {
        if (ProjectId == null)
        {
            try
            {
                projects = await ProjectApi.GetAllProjectsAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading projects: {ex.Message}");
                projects = new List<ProjectResponse>();
            }
        }
        else
        {
            try
            {
                selectedProject = await ProjectApi.GetProjectAsync(ProjectId.Value);
                model.ProjectId = ProjectId.Value;

                // Set selectedProjectType from selectedProject if available
                if (selectedProject != null)
                {
                    selectedProjectType = selectedProject.Type;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading project: {ex.Message}");
            }
        }

        InitializeArchiveStages();
        InitializeCodeUpdateModel();
    }

    private void OnProjectChanged()
    {
         _ = InvokeAsync(async () =>
        {   
           selectedProjectId = selectedProjectId?.Trim();
            if (Guid.TryParse(selectedProjectId, out var selectedGuid))
            {
                selectedProject = projects?.FirstOrDefault(p => p.Id == selectedGuid);
                selectedProjectType = selectedProject?.Type;
            }
            else
            {
                selectedProject = null;
                selectedProjectType = null;
            }

            // Optionally reset workflow type to default for this project type
            model.WorkflowType = GetDefaultWorkflowTypeForProject(selectedProjectType);

            // Re-initialize stages and fields
            InitializeFieldsForWorkflowType();
            await InvokeAsync(StateHasChanged);
        });
    }

    private void OnWorkflowTypeChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse<WorkflowType>(e.Value?.ToString(), out var selectedType))
        {
            model.WorkflowType = selectedType;

            messageStore.Clear();
            messageStore.Clear(FieldIdentifier.Create(() => model.ConfigurationName));
            messageStore.Clear(FieldIdentifier.Create(() => codeUpdateModel.Title));
            editContext.NotifyValidationStateChanged();
            StateHasChanged();
        }
    }

    private IEnumerable<WorkflowType> GetFilteredWorkflowTypes()
    {
        if (selectedProjectType == ProjectType.CodeUpdate)
        {
            yield return WorkflowType.CodeUpdate;
        }
        else if (selectedProjectType == ProjectType.ConfigCleanup)
        {
            // Return all except CodeUpdate
            foreach (var type in Enum.GetValues(typeof(WorkflowType)).Cast<WorkflowType>())
            {
                if (type != WorkflowType.CodeUpdate)
                    yield return type;
            }
        }
        else
        {
            // Unknown or standalone — return all
            foreach (var type in Enum.GetValues(typeof(WorkflowType)).Cast<WorkflowType>())
            {
                yield return type;
            }
        }
    }


    private void InitializeFieldsForWorkflowType()
    {
        if (model.WorkflowType == WorkflowType.CodeUpdate)
        {
            InitializeCodeUpdateModel();
        }
        else if (model.WorkflowType == WorkflowType.ArchiveOnly)
        {
            archiveStages.Clear();
            InitializeArchiveStages();
        }
        // Optionally clear fields for other types
    }

    private WorkflowType GetDefaultWorkflowTypeForProject(ProjectType? projectType)
    {
        return projectType switch
        {
            ProjectType.CodeUpdate => WorkflowType.CodeUpdate,
            ProjectType.ConfigCleanup => WorkflowType.ArchiveOnly,
            _ => WorkflowType.ArchiveOnly
        };
    }

    private void InitializeCodeUpdateModel()
    {
        codeUpdateModel.Stages = codeUpdateStages
            .Select(stage => new CodeUpdateStageModel { Name = stage })
            .ToList();
    }

    private void InitializeArchiveStages()
    {
        if (model.WorkflowType == WorkflowType.ArchiveOnly && !archiveStages.Any())
        {
            archiveStages.Add(new ArchiveStageModel
            {
                Name = "Production",
                CurrentPercentage = 100,
                TargetPercentage = 0,
                WaitHours = 24
            });
        }
    }

    private void AddStage()
    {
        archiveStages.Add(new ArchiveStageModel
        {
            Name = $"Stage {archiveStages.Count + 1}",
            CurrentPercentage = 100,
            TargetPercentage = 0,
            WaitHours = 2
        });
    }

    private void RemoveStage(ArchiveStageModel stage)
    {
        if (archiveStages.Count > 1)
        {
            archiveStages.Remove(stage);
        }
    }

    private void MoveStageUp(int index)
    {
        if( index > 0)
        {
            var stage = archiveStages[index];
            archiveStages.RemoveAt(index);
            archiveStages.Insert(index - 1, stage);
        }
    }

    private void MoveStageDown(int index)
    {
        if (index < archiveStages.Count - 1)
        {
            var stage = archiveStages[index];
            archiveStages.RemoveAt(index);
            archiveStages.Insert(index + 1, stage);
        }
    }

    private void SetupTemplate(string template)
    {
        archiveStages.Clear();

        switch (template)
        {
            case "standard":
                archiveStages.AddRange(new[]
                {
                new ArchiveStageModel { Name = "Production", CurrentPercentage = 100, TargetPercentage = 0, WaitHours = 24 },
                new ArchiveStageModel { Name = "Test", CurrentPercentage = 100, TargetPercentage = 0, WaitHours = 4 },
                new ArchiveStageModel { Name = "Development", CurrentPercentage = 100, TargetPercentage = 0, WaitHours = 1 }
            });
                break;
            case "simple":
                archiveStages.AddRange(new[]
                {
                new ArchiveStageModel { Name = "Production", CurrentPercentage = 100, TargetPercentage = 0, WaitHours = 24 },
                new ArchiveStageModel { Name = "Development", CurrentPercentage = 100, TargetPercentage = 0, WaitHours = 2 }
            });
                break;
            case "gradual":
                archiveStages.AddRange(new[]
                {
                new ArchiveStageModel { Name = "Production (Phase 1)", CurrentPercentage = 100, TargetPercentage = 50, WaitHours = 12 },
                new ArchiveStageModel { Name = "Production (Phase 2)", CurrentPercentage = 50, TargetPercentage = 0, WaitHours = 24 }
            });
                break;
        }
    }

    private void AddMetadata()
    {
        metadataItems.Add(new MetadataItem());
    }

    private void RemoveMetadata(MetadataItem item)
    {
        if (metadataItems.Count > 1)
            metadataItems.Remove(item);
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        try
        {
            if (model.WorkflowType == WorkflowType.CodeUpdate)
            {
                // Convert metadata items to dictionary
                codeUpdateModel.Metadata = metadataItems
                    .Where(m => !string.IsNullOrWhiteSpace(m.Key))
                    .ToDictionary(m => m.Key.Trim(), m => m.Value?.Trim() ?? "");

                // Set project ID if selected from dropdown
                if (ProjectId == null && !string.IsNullOrEmpty(selectedProjectId) && Guid.TryParse(selectedProjectId, out var codeUpdateProjectGuid))
                {
                    codeUpdateModel.ProjectId = codeUpdateProjectGuid;
                }
                else
                {
                    codeUpdateModel.ProjectId = model.ProjectId;
                }

                codeUpdateModel.Title = model.ConfigurationName;
                // Use the correct API method for CodeUpdateWorkflowRequest
                var codeUpdateWorkflow = await WorkflowApi.CreateCodeUpdateWorkflowAsync(codeUpdateModel);

                Navigation.NavigateTo($"/workflows/{codeUpdateWorkflow.Id}");
                return;
            }

            // Convert metadata items to dictionary
            model.Metadata = metadataItems
                .Where(m => !string.IsNullOrWhiteSpace(m.Key))
                .ToDictionary(m => m.Key.Trim(), m => m.Value?.Trim() ?? "");

            if (model.WorkflowType == WorkflowType.ArchiveOnly && archiveStages.Any())
            {
                var stageConfig = System.Text.Json.JsonSerializer.Serialize(archiveStages);
                model.Metadata["archiveStages"] = stageConfig;
            }

            // Set project ID if selected from dropdown
            if (ProjectId == null && !string.IsNullOrEmpty(selectedProjectId) && Guid.TryParse(selectedProjectId, out var projectGuid))
            {
                model.ProjectId = projectGuid;
            }

            WorkflowResponse workflow;

            // Create workflow in project or standalone
            if (model.ProjectId.HasValue)
            {
                workflow = await ProjectApi.CreateWorkflowInProjectAsync(model.ProjectId.Value, model);
            }
            else
            {
                workflow = await WorkflowApi.CreateWorkflowAsync(model);
            }

            Navigation.NavigateTo($"/workflows/{workflow.Id}");
        }
        catch (Exception ex)
        {
            // In real app, show error message to user
            Console.WriteLine($"Error creating workflow: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        if (ProjectId.HasValue)
        {
            Navigation.NavigateTo($"/projects/{ProjectId}");
        }
        else
        {
            Navigation.NavigateTo("/");
        }
    }

    public class ArchiveStageModel
    {
        public string Name { get; set; } = "";
        public int CurrentPercentage { get; set; } = 100;
        public int TargetPercentage { get; set; } = 0;
        public double WaitHours { get; set; } = 24;
    }
}