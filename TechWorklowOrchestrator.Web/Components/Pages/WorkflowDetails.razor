@page "/workflows/{id:guid}"
@rendermode InteractiveServer
@implements IDisposable

<PageTitle>Workflow Details</PageTitle>

@if (workflow != null)
{
    <div class="container-fluid">
        <div class="row mb-4">
            <div class="col">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/">Home</a></li>
                        <li class="breadcrumb-item active">@workflow.ConfigurationName</li>
                    </ol>
                </nav>

                <div class="d-flex justify-content-between align-items-start">
                    <div>
                        <h1 class="display-6">@workflow.ConfigurationName</h1>
                        <div class="d-flex gap-2 mb-2">
                            <span class="badge bg-secondary fs-6">@workflow.WorkflowType</span>
                            <span class="badge @GetStateBadgeClass(workflow.CurrentState) fs-6">@workflow.CurrentState</span>

                            <!-- Auto-refresh indicator -->
                            @if (ShouldAutoRefresh() && autoRefreshTimer != null)
                            {
                                <span class="badge bg-info fs-6">
                                    <i class="bi bi-arrow-clockwise"></i> Auto-refreshing
                                </span>
                            }
                        </div>
                        <p class="text-muted">
                            Created @workflow.CreatedAt.ToString("MMMM dd, yyyy 'at' HH:mm")
                            @if (lastRefresh != DateTime.MinValue)
                            {
                                <span class="ms-3">
                                    <small>Last updated: @lastRefresh.ToString("HH:mm:ss")</small>
                                </span>
                            }
                        </p>
                    </div>
                    <div class="text-end">
                        @if (workflow.CurrentState == WorkflowState.Created)
                        {
                            <button class="btn btn-success me-2" @onclick="StartWorkflow" disabled="@isStartingWorkflow">
                                @if (isStartingWorkflow)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Starting...</span>
                                }
                                else
                                {
                                    <i class="bi bi-play-circle"></i>
                                    <span>Start Workflow</span>
                                }
                            </button>
                        }
                        @if (workflow.CurrentState == WorkflowState.AwaitingUserAction)
                        {
                            <button class="btn btn-primary me-2" @onclick="ProceedWorkflow" disabled="@isProceedingWorkflow">
                                @if (isProceedingWorkflow)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Processing...</span>
                                }
                                else
                                {
                                    <i class="bi bi-arrow-right-circle"></i>
                                    <span>@GetProceedButtonText()</span>
                                }
                            </button>
                        }
                        @if (CanHandleExternalEvents(workflow))
                        {
                            <button class="btn btn-warning me-2" @onclick="() => showEventModal = true">
                                <i class="bi bi-lightning"></i> Handle Event
                            </button>
                        }
                        <button class="btn btn-outline-secondary" @onclick="RefreshWorkflow" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            else
                            {
                                <i class="bi bi-arrow-clockwise"></i>
                            }
                            Refresh
                        </button>
                    </div>
                </div>
            </div>
        </div>

        @if (isStartingWorkflow)
        {
            <div class="alert alert-info" role="alert">
                <div class="d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                    <div>Starting workflow and initializing stages...</div>
                </div>
            </div>
        }

        @if (ShouldAutoRefresh() && autoRefreshTimer != null)
        {
            <div class="alert alert-light border-info" role="alert">
                <div class="d-flex align-items-center justify-content-between">
                    <div>
                        <i class="bi bi-info-circle text-info"></i>
                        <strong>Live tracking:</strong> This page auto-refreshes every 5 seconds while the workflow is active.
                    </div>
                    <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="StopAutoRefresh">
                        Stop auto-refresh
                    </button>
                </div>
            </div>
        }

        <div class="row">
            <div class="col-md-8">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Progress</h5>
                    </div>
                    <div class="card-body">
                        <div class="progress mb-3" style="height: 30px;">
                            <div class="progress-bar @GetProgressBarClass(workflow.CurrentState)"
                                 role="progressbar"
                                 style="width: @workflow.Progress.PercentComplete%"
                                 aria-valuenow="@workflow.Progress.PercentComplete"
                                 aria-valuemin="0"
                                 aria-valuemax="100">
                                @($"{workflow.Progress.PercentComplete:F0}%")
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <strong>Current Step:</strong> @workflow.Progress.CurrentStep of @workflow.Progress.TotalSteps
                            </div>
                            <div class="col-md-6">
                                <strong>Status:</strong> @workflow.Progress.CurrentStepDescription
                            </div>
                        </div>

                        @if (workflow.Progress.RequiresManualAction)
                        {
                            <div class="alert alert-warning mt-3">
                                <i class="bi bi-exclamation-triangle"></i>
                                <strong>Manual Action Required:</strong> @workflow.Progress.ManualActionDescription
                            </div>
                        }

                        @if (workflow.CurrentState == WorkflowState.AwaitingUserAction)
                        {
                            <div class="alert alert-info mt-3">
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-hand-index me-2"></i>
                                    <div>
                                        <strong>Manual Action Required:</strong>
                                        Click "@GetProceedButtonText()" to continue with the next step.
                                    </div>
                                </div>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(workflow.ErrorMessage))
                        {
                            <div class="alert alert-danger mt-3">
                                <i class="bi bi-exclamation-circle"></i>
                                <strong>Error:</strong> @workflow.ErrorMessage
                            </div>
                        }
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Status</h5>
                    </div>
                    <div class="card-body">
                        <p class="lead">@workflow.Status</p>
                        @if (workflow.LastUpdated.HasValue)
                        {
                            <small class="text-muted">Last updated: @workflow.LastUpdated.Value.ToString("MMMM dd, yyyy 'at' HH:mm")</small>
                        }
                    </div>
                </div>
                @if (workflow?.WorkflowType == WorkflowType.ArchiveOnly && workflow.Metadata.ContainsKey("stageProgress"))
                {
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="bi bi-diagram-3"></i> Stage Progress
                            </h5>
                        </div>

                        <div class="card-body">
                            @if (stageProgress?.Any() == true)
                            {
                                <div class="timeline">
                                    @foreach (var stage in stageProgress.Select((s, index) => new { stage = s, index }))
                                    {
                                        <div class="timeline-item @GetStageTimelineClass(stage.stage.Status)">

                                            <!-- Timeline Marker -->
                                            <div class="timeline-marker">
                                                @if (stage.stage.Status == "Completed")
                                                {
                                                    <i class="bi bi-check-circle-fill text-success"></i>
                                                }
                                                else if (stage.stage.Status == "ReducingTraffic")
                                                {
                                                    <div class="spinner-border spinner-border-sm text-primary" role="status"></div>
                                                }
                                                else if (stage.stage.Status == "Waiting")
                                                {
                                                    <i class="bi bi-clock-fill text-warning"></i>
                                                }
                                                else if (stage.stage.Status == "Failed")
                                                {
                                                    <i class="bi bi-x-circle-fill text-danger"></i>
                                                }
                                                else
                                                {
                                                    <i class="bi bi-circle text-muted"></i>
                                                }
                                            </div>

                                            <!-- Timeline Content -->
                                            <div class="timeline-content">
                                                <div class="d-flex justify-content-between align-items-start">
                                                    <div>
                                                        <h6 class="mb-1">@stage.stage.Name</h6>
                                                        <div class="mb-2">
                                                            <span class="badge @GetStageBadgeClass(stage.stage.Status)">
                                                                @GetStageStatusText(stage.stage.Status)
                                                            </span>
                                                        </div>
                                                    </div>
                                                    <div class="text-end">
                                                        <small class="text-muted">
                                                            @stage.stage.CurrentAllocationPercentage% → @stage.stage.TargetAllocationPercentage%
                                                        </small>
                                                    </div>
                                                </div>

                                                <!-- Progress Bar -->
                                                @if (stage.stage.Status == "ReducingTraffic" || stage.stage.Status == "Waiting")
                                                {
                                                    <div class="mb-2">
                                                        <div class="progress" style="height: 8px;">
                                                            <div class="progress-bar @GetStageProgressBarClass(stage.stage.Status)"
                                                                 role="progressbar"
                                                                 style="width: @GetStageProgressPercentage(stage.stage)%">
                                                            </div>
                                                        </div>
                                                        <small class="text-muted">@GetStageProgressText(stage.stage)</small>
                                                    </div>
                                                }

                                                <!-- Timing Info -->
                                                <div class="small text-muted">
                                                    @if (stage.stage.StartedAt.HasValue)
                                                    {
                                                        <div>Started: @stage.stage.StartedAt.Value.ToString("MMM dd, HH:mm")</div>
                                                    }
                                                    @if (stage.stage.Status == "Waiting" && stage.stage.WaitStartTime.HasValue)
                                                    {
                                                        <div>Wait started: @stage.stage.WaitStartTime.Value.ToString("MMM dd, HH:mm")</div>
                                                        <div>Wait duration: @FormatDuration(stage.stage.WaitDuration)</div>
                                                    }
                                                    @if (stage.stage.CompletedAt.HasValue)
                                                    {
                                                        <div>Completed: @stage.stage.CompletedAt.Value.ToString("MMM dd, HH:mm")</div>
                                                    }
                                                    @if (!string.IsNullOrEmpty(stage.stage.ErrorMessage))
                                                    {
                                                        <div class="text-danger">Error: @stage.stage.ErrorMessage</div>
                                                    }
                                                </div>
                                            </div>

                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <p class="text-muted">No stage information available</p>
                            }
                        </div>
                    </div>
                }
            </div>
            <div class="col-md-4">
                @* @if (workflow.Metadata?.Any() == true)
                {
                    <div class="card mb-4">
                        <div class="card-header">
                            <h6 class="mb-0">Metadata</h6>
                        </div>
                        <div class="card-body">
                            @foreach (var meta in workflow.Metadata)
                            {
                                <div class="mb-2">
                                    <strong>@meta.Key:</strong> @meta.Value
                                </div>
                            }
                        </div>
                    </div>
                } *@

                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">Workflow Info</h6>
                    </div>
                    <div class="card-body">
                        <div class="mb-2">
                            <strong>ID:</strong><br>
                            <small class="font-monospace">@workflow.Id</small>
                        </div>
                        <div class="mb-2">
                            <strong>Type:</strong> @workflow.WorkflowType
                        </div>
                        <div class="mb-2">
                            <strong>Current State:</strong> @workflow.CurrentState
                        </div>
                        <div class="mb-2">
                            <strong>Created:</strong> @workflow.CreatedAt.ToString("MMM dd, yyyy")
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (workflow?.WorkflowType == WorkflowType.CodeFirst)
    {
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="bi bi-code-slash"></i> CodeFirst Progress
                </h5>
            </div>
            <div class="card-body">
                <!-- Simple Step Indicator -->
                <div class="row mb-4">
                    <div class="col-12">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span class="fw-bold">Progress</span>
                            <span class="text-muted">Step @GetCodeFirstStepProgress() of 5</span>
                        </div>
                        <div class="progress" style="height: 12px;">
                            <div class="progress-bar @GetCodeFirstProgressBarClass()"
                                 role="progressbar"
                                 style="width: @(GetCodeFirstStepProgress() * 20)%"
                                 aria-valuenow="@GetCodeFirstStepProgress()"
                                 aria-valuemin="0"
                                 aria-valuemax="5">
                            </div>
                        </div>
                        <div class="d-flex justify-content-between mt-1">
                            <small class="text-muted">Code</small>
                            <small class="text-muted">PR</small>
                            <small class="text-muted">Review</small>
                            <small class="text-muted">Merge</small>
                            <small class="text-muted">Deploy</small>
                        </div>
                    </div>
                </div>

                <!-- Current Step Details -->
                <div class="alert @GetCodeFirstCurrentStepAlertClass() border-0">
                    <div class="d-flex align-items-center">
                        <div class="me-3">
                            @if (workflow.CurrentState == WorkflowState.InProgress)
                            {
                                <div class="spinner-border spinner-border-sm text-primary" role="status"></div>
                            }
                            else if (workflow.CurrentState == WorkflowState.AwaitingUserAction)
                            {
                                <i class="bi bi-hand-index fs-5 text-info"></i>
                            }
                            else if (workflow.CurrentState == WorkflowState.AwaitingReview || workflow.CurrentState == WorkflowState.WaitingForDeployment)
                            {
                                <i class="bi bi-clock fs-5 text-warning"></i>
                            }
                            else if (workflow.CurrentState == WorkflowState.Completed)
                            {
                                <i class="bi bi-check-circle fs-5 text-success"></i>
                            }
                            else
                            {
                                <i class="bi bi-circle fs-5 text-muted"></i>
                            }
                        </div>
                        <div class="flex-grow-1">
                            <div class="fw-bold">@GetCodeFirstCurrentStepTitle()</div>
                            <div class="text-muted">@GetCodeFirstCurrentStepDescription()</div>
                            @if (!string.IsNullOrEmpty(workflow.PullRequestUrl))
                            {
                                <div class="mt-1">
                                    <a href="@workflow.PullRequestUrl" target="_blank" class="text-decoration-none">
                                        <i class="bi bi-box-arrow-up-right"></i> View Pull Request
                                    </a>
                                </div>
                            }
                        </div>
                        @if (workflow.CurrentState == WorkflowState.AwaitingUserAction && string.IsNullOrEmpty(workflow.PullRequestUrl))
                        {
                            <div>
                                <button class="btn btn-primary btn-sm" @onclick="() => showPRUrlModal = true">
                                    <i class="bi bi-link-45deg"></i> Set PR URL
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Next Steps Reminder for Completed CodeFirst Workflows -->
    @if (workflow?.WorkflowType == WorkflowType.CodeFirst && (workflow.CurrentState.ToString() == "Completed"))
    {
        <div class="card mb-4">
            <div class="card-body">
                <div class="alert alert-info border-0 m-0">
                    <div class="d-flex align-items-start">
                        <div class="me-3">
                            <i class="bi bi-info-circle fs-4 text-info"></i>
                        </div>
                        <div class="flex-grow-1">
                            <h5 class="fw-bold mb-2">Next Step: Configuration Cleanup</h5>
                            <p class="text-muted mb-3">
                                Great job! The code has been removed and deployed successfully. However, you may still need to clean up the actual configuration values.
                                Consider creating an <strong>ArchiveOnly workflow</strong> to safely rolldown and remove the configuration from your system.
                            </p>
                            <div>
                                <a href="/projects/@workflow.ProjectId/workflows/create" class="btn btn-primary">
                                    <i class="bi bi-plus-circle me-2"></i> Create ArchiveOnly Workflow
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (showPRUrlModal)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Set Pull Request URL</h5>
                        <button type="button" class="btn-close" @onclick="() => showPRUrlModal = false"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Pull Request URL</label>
                            <input type="url" class="form-control" @bind="prUrlInput"
                                   placeholder="https://github.com/your-org/repo/pull/123" />
                            <div class="form-text">
                                Enter the URL of the pull request created for removing this configuration.
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showPRUrlModal = false">
                            Cancel
                        </button>
                        <button type="button" class="btn btn-primary" @onclick="SetPullRequestUrl"
                                disabled="@(string.IsNullOrEmpty(prUrlInput) || isSettingPRUrl)">
                            @if (isSettingPRUrl)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            Set PR URL
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
    <!-- External Event Modal -->
    @if (showEventModal)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Handle External Event</h5>
                        <button type="button" class="btn-close" @onclick="() => showEventModal = false"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Event Type</label>
                            <select class="form-select" @bind="selectedEventType">
                                <option value="">Select event type...</option>
                                @if (workflow.WorkflowType == WorkflowType.CodeFirst)
                                {
                                    <option value="PRApproved">PR Approved</option>
                                    <option value="PRMerged">PR Merged</option>
                                    <option value="DeploymentCompleted">Deployment Completed</option>
                                }
                                <option value="WaitPeriodCompleted">Wait Period Completed</option>
                            </select>
                        </div>
                        @if (!string.IsNullOrEmpty(selectedEventType))
                        {
                            <div class="mb-3">
                                <label class="form-label">Additional Data (JSON)</label>
                                <textarea class="form-control" rows="4" @bind="eventDataJson"
                                          placeholder='{"key": "value"}'></textarea>
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showEventModal = false">
                            Cancel
                        </button>
                        <button type="button" class="btn btn-primary" @onclick="HandleExternalEvent"
                                disabled="@(string.IsNullOrEmpty(selectedEventType) || isProcessingEvent)">
                            @if (isProcessingEvent)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            Send Event
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
}
else if (isLoading)
{
    <div class="container text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading workflow...</p>
    </div>
}
else
{
    <div class="container">
        <div class="alert alert-danger">
            <h4>Workflow Not Found</h4>
            <p>The workflow with ID @Id was not found.</p>
            <a href="/" class="btn btn-primary">Go Home</a>
        </div>
    </div>
}