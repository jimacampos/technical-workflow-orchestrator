@page "/workflows/{id:guid}"
@rendermode InteractiveServer
@inject IWorkflowApiService WorkflowApi
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>Workflow Details</PageTitle>

@if (workflow != null)
{
    <div class="container-fluid">
        <div class="row mb-4">
            <div class="col">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/">Home</a></li>
                        <li class="breadcrumb-item active">@workflow.ConfigurationName</li>
                    </ol>
                </nav>

                <div class="d-flex justify-content-between align-items-start">
                    <div>
                        <h1 class="display-6">@workflow.ConfigurationName</h1>
                        <div class="d-flex gap-2 mb-2">
                            <span class="badge bg-secondary fs-6">@workflow.WorkflowType</span>
                            <span class="badge @GetStateBadgeClass(workflow.CurrentState) fs-6">@workflow.CurrentState</span>

                            <!-- Auto-refresh indicator -->
                            @if (ShouldAutoRefresh() && autoRefreshTimer != null)
                            {
                                <span class="badge bg-info fs-6">
                                    <i class="bi bi-arrow-clockwise"></i> Auto-refreshing
                                </span>
                            }
                        </div>
                        <p class="text-muted">
                            Created @workflow.CreatedAt.ToString("MMMM dd, yyyy 'at' HH:mm")
                            @if (lastRefresh != DateTime.MinValue)
                            {
                                <span class="ms-3">
                                    <small>Last updated: @lastRefresh.ToString("HH:mm:ss")</small>
                                </span>
                            }
                        </p>
                    </div>
                    <div class="text-end">
                        @if (workflow.CurrentState == WorkflowState.Created)
                        {
                            <button class="btn btn-success me-2" @onclick="StartWorkflow" disabled="@isStartingWorkflow">
                @if (isStartingWorkflow)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    <span>Starting...</span>
                }
                else
                {
                    <i class="bi bi-play-circle"></i>
                    <span>Start Workflow</span>
                }
            </button>
                        }
                        @if (CanHandleExternalEvents(workflow))
                        {
                            <button class="btn btn-warning me-2" @onclick="() => showEventModal = true">
                                <i class="bi bi-lightning"></i> Handle Event
                            </button>
                        }
                        <button class="btn btn-outline-secondary" @onclick="RefreshWorkflow" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            else
                            {
                                <i class="bi bi-arrow-clockwise"></i>
                            }
                            Refresh
                        </button>
                    </div>
                </div>
            </div>
        </div>

        @if (isStartingWorkflow)
        {
            <div class="alert alert-info" role="alert">
                <div class="d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                    <div>Starting workflow and initializing stages...</div>
                </div>
            </div>
        }

        @if (ShouldAutoRefresh() && autoRefreshTimer != null)
        {
            <div class="alert alert-light border-info" role="alert">
                <div class="d-flex align-items-center justify-content-between">
                    <div>
                        <i class="bi bi-info-circle text-info"></i>
                        <strong>Live tracking:</strong> This page auto-refreshes every 5 seconds while the workflow is active.
                    </div>
                    <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="StopAutoRefresh">
                        Stop auto-refresh
                    </button>
                </div>
            </div>
        }

        <div class="row">
            <div class="col-md-8">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Progress</h5>
                    </div>
                    <div class="card-body">
                        <div class="progress mb-3" style="height: 30px;">
                            <div class="progress-bar @GetProgressBarClass(workflow.CurrentState)"
                                 role="progressbar"
                                 style="width: @workflow.Progress.PercentComplete%"
                                 aria-valuenow="@workflow.Progress.PercentComplete"
                                 aria-valuemin="0"
                                 aria-valuemax="100">
                                @($"{workflow.Progress.PercentComplete:F0}%")
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <strong>Current Step:</strong> @workflow.Progress.CurrentStep of @workflow.Progress.TotalSteps
                            </div>
                            <div class="col-md-6">
                                <strong>Status:</strong> @workflow.Progress.CurrentStepDescription
                            </div>
                        </div>

                        @if (workflow.Progress.RequiresManualAction)
                        {
                            <div class="alert alert-warning mt-3">
                                <i class="bi bi-exclamation-triangle"></i>
                                <strong>Manual Action Required:</strong> @workflow.Progress.ManualActionDescription
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(workflow.ErrorMessage))
                        {
                            <div class="alert alert-danger mt-3">
                                <i class="bi bi-exclamation-circle"></i>
                                <strong>Error:</strong> @workflow.ErrorMessage
                            </div>
                        }
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Status</h5>
                    </div>
                    <div class="card-body">
                        <p class="lead">@workflow.Status</p>
                        @if (workflow.LastUpdated.HasValue)
                        {
                            <small class="text-muted">Last updated: @workflow.LastUpdated.Value.ToString("MMMM dd, yyyy 'at' HH:mm")</small>
                        }
                    </div>
                </div>
                @if (workflow?.WorkflowType == WorkflowType.ArchiveOnly && workflow.Metadata.ContainsKey("stageProgress"))
                {
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="bi bi-diagram-3"></i> Stage Progress
                            </h5>
                        </div>

                        <div class="card-body">
                            @if (stageProgress?.Any() == true)
                            {
                                <div class="timeline">
                                    @foreach (var stage in stageProgress.Select((s, index) => new { stage = s, index }))
                                    {
                                        <div class="timeline-item @GetStageTimelineClass(stage.stage.Status)">

                                            <!-- Timeline Marker -->
                                            <div class="timeline-marker">
                                                @if (stage.stage.Status == "Completed")
                                                {
                                                    <i class="bi bi-check-circle-fill text-success"></i>
                                                }
                                                else if (stage.stage.Status == "ReducingTraffic")
                                                {
                                                    <div class="spinner-border spinner-border-sm text-primary" role="status"></div>
                                                }
                                                else if (stage.stage.Status == "Waiting")
                                                {
                                                    <i class="bi bi-clock-fill text-warning"></i>
                                                }
                                                else if (stage.stage.Status == "Failed")
                                                {
                                                    <i class="bi bi-x-circle-fill text-danger"></i>
                                                }
                                                else
                                                {
                                                    <i class="bi bi-circle text-muted"></i>
                                                }
                                            </div>

                                            <!-- Timeline Content -->
                                            <div class="timeline-content">
                                                <div class="d-flex justify-content-between align-items-start">
                                                    <div>
                                                        <h6 class="mb-1">@stage.stage.Name</h6>
                                                        <div class="mb-2">
                                                            <span class="badge @GetStageBadgeClass(stage.stage.Status)">
                                                                @GetStageStatusText(stage.stage.Status)
                                                            </span>
                                                        </div>
                                                    </div>
                                                    <div class="text-end">
                                                        <small class="text-muted">
                                                            @stage.stage.CurrentAllocationPercentage% → @stage.stage.TargetAllocationPercentage%
                                                        </small>
                                                    </div>
                                                </div>

                                                <!-- Progress Bar -->
                                                @if (stage.stage.Status == "ReducingTraffic" || stage.stage.Status == "Waiting")
                                                {
                                                    <div class="mb-2">
                                                        <div class="progress" style="height: 8px;">
                                                            <div class="progress-bar @GetStageProgressBarClass(stage.stage.Status)"
                                                                 role="progressbar"
                                                                 style="width: @GetStageProgressPercentage(stage.stage)%">
                                                            </div>
                                                        </div>
                                                        <small class="text-muted">@GetStageProgressText(stage.stage)</small>
                                                    </div>
                                                }

                                                <!-- Timing Info -->
                                                <div class="small text-muted">
                                                    @if (stage.stage.StartedAt.HasValue)
                                                    {
                                                        <div>Started: @stage.stage.StartedAt.Value.ToString("MMM dd, HH:mm")</div>
                                                    }
                                                    @if (stage.stage.Status == "Waiting" && stage.stage.WaitStartTime.HasValue)
                                                    {
                                                        <div>Wait started: @stage.stage.WaitStartTime.Value.ToString("MMM dd, HH:mm")</div>
                                                        <div>Wait duration: @FormatDuration(stage.stage.WaitDuration)</div>
                                                    }
                                                    @if (stage.stage.CompletedAt.HasValue)
                                                    {
                                                        <div>Completed: @stage.stage.CompletedAt.Value.ToString("MMM dd, HH:mm")</div>
                                                    }
                                                    @if (!string.IsNullOrEmpty(stage.stage.ErrorMessage))
                                                    {
                                                        <div class="text-danger">Error: @stage.stage.ErrorMessage</div>
                                                    }
                                                </div>
                                            </div>

                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <p class="text-muted">No stage information available</p>
                            }
                        </div>
                    </div>
                }
            </div>

            <div class="col-md-4">
                @* @if (workflow.Metadata?.Any() == true)
                {
                    <div class="card mb-4">
                        <div class="card-header">
                            <h6 class="mb-0">Metadata</h6>
                        </div>
                        <div class="card-body">
                            @foreach (var meta in workflow.Metadata)
                            {
                                <div class="mb-2">
                                    <strong>@meta.Key:</strong> @meta.Value
                                </div>
                            }
                        </div>
                    </div>
                } *@

                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">Workflow Info</h6>
                    </div>
                    <div class="card-body">
                        <div class="mb-2">
                            <strong>ID:</strong><br>
                            <small class="font-monospace">@workflow.Id</small>
                        </div>
                        <div class="mb-2">
                            <strong>Type:</strong> @workflow.WorkflowType
                        </div>
                        <div class="mb-2">
                            <strong>Current State:</strong> @workflow.CurrentState
                        </div>
                        <div class="mb-2">
                            <strong>Created:</strong> @workflow.CreatedAt.ToString("MMM dd, yyyy")
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <!-- External Event Modal -->
    @if (showEventModal)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Handle External Event</h5>
                        <button type="button" class="btn-close" @onclick="() => showEventModal = false"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Event Type</label>
                            <select class="form-select" @bind="selectedEventType">
                                <option value="">Select event type...</option>
                                @if (workflow.WorkflowType == WorkflowType.CodeFirst)
                                {
                                    <option value="PRApproved">PR Approved</option>
                                    <option value="DeploymentCompleted">Deployment Completed</option>
                                }
                                <option value="WaitPeriodCompleted">Wait Period Completed</option>
                            </select>
                        </div>
                        @if (!string.IsNullOrEmpty(selectedEventType))
                        {
                            <div class="mb-3">
                                <label class="form-label">Additional Data (JSON)</label>
                                <textarea class="form-control" rows="4" @bind="eventDataJson"
                                          placeholder='{"key": "value"}'></textarea>
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showEventModal = false">
                            Cancel
                        </button>
                        <button type="button" class="btn btn-primary" @onclick="HandleExternalEvent"
                                disabled="@(string.IsNullOrEmpty(selectedEventType) || isProcessingEvent)">
                            @if (isProcessingEvent)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            Send Event
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
}
else if (isLoading)
{
    <div class="container text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading workflow...</p>
    </div>
}
else
{
    <div class="container">
        <div class="alert alert-danger">
            <h4>Workflow Not Found</h4>
            <p>The workflow with ID @Id was not found.</p>
            <a href="/" class="btn btn-primary">Go Home</a>
        </div>
    </div>
}

<style>
    .timeline {
        position: relative;
        padding-left: 0;
    }

    .timeline-item {
        position: relative;
        padding-left: 40px;
        padding-bottom: 20px;
    }

        .timeline-item:not(:last-child)::before {
            content: '';
            position: absolute;
            left: 12px;
            top: 25px;
            bottom: -20px;
            width: 2px;
            background-color: #dee2e6;
        }

        .timeline-item.active::before {
            background-color: #0d6efd;
        }

        .timeline-item.completed::before {
            background-color: #198754;
        }

    .timeline-marker {
        position: absolute;
        left: 0;
        top: 0;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: white;
        border-radius: 50%;
    }

    .timeline-content {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 12px;
        border-left: 3px solid #dee2e6;
    }

    .timeline-item.active .timeline-content {
        border-left-color: #0d6efd;
        background-color: #f0f8ff;
    }

    .timeline-item.completed .timeline-content {
        border-left-color: #198754;
        background-color: #f0fff0;
    }

    .timeline-item.failed .timeline-content {
        border-left-color: #dc3545;
        background-color: #fff5f5;
    }
</style>

@code {
    [Parameter] public Guid Id { get; set; }

    private WorkflowResponse? workflow;
    private bool isLoading = true;
    private bool showEventModal = false;
    private string selectedEventType = "";
    private string eventDataJson = "{}";
    private bool isProcessingEvent = false;
    private List<StageProgressModel>? stageProgress;

    // New properties for improved UX
    private bool isStartingWorkflow = false;
    private Timer? autoRefreshTimer;
    private bool isAutoRefreshing = false;
    private DateTime lastRefresh = DateTime.MinValue;

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkflow();
        StartAutoRefresh();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (workflow?.Id != Id)
        {
            StopAutoRefresh();
            await LoadWorkflow();
            StartAutoRefresh();
        }
    }

    // Clean up timer when component is disposed
    public void Dispose()
    {
        StopAutoRefresh();
    }

    private void StartAutoRefresh()
    {
        // Only auto-refresh if workflow is active (not completed or failed)
        if (ShouldAutoRefresh())
        {
            autoRefreshTimer = new System.Timers.Timer(5000); // 5 seconds
            autoRefreshTimer.Elapsed += async (sender, e) =>
            {
                await InvokeAsync(async () =>
                {
                    await RefreshWorkflow();
                    StateHasChanged();
                });
            };
            autoRefreshTimer.AutoReset = true;
            autoRefreshTimer.Start();
        }
    }

    private void StopAutoRefresh()
    {
        autoRefreshTimer?.Stop();
        autoRefreshTimer?.Dispose();
        autoRefreshTimer = null;
    }

    private bool ShouldAutoRefresh()
    {
        if (workflow == null) return false;

        // Auto-refresh for archive workflows that are in progress or waiting
        if (workflow.WorkflowType == WorkflowType.ArchiveOnly &&
            (workflow.CurrentState == WorkflowState.InProgress || workflow.CurrentState == WorkflowState.Waiting || workflow.CurrentState == WorkflowState.Created))
        {
            return true;
        }

        return false;
    }

    private async Task AutoRefresh()
    {
        if (isAutoRefreshing || isLoading) return;

        try
        {
            isAutoRefreshing = true;
            await LoadWorkflow(silent: true);

            // Stop auto-refresh if workflow is completed or failed
            if (!ShouldAutoRefresh())
            {
                StopAutoRefresh();
            }

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Auto-refresh failed: {ex.Message}");
        }
        finally
        {
            isAutoRefreshing = false;
        }
    }

    private async Task LoadWorkflow(bool silent = false)
    {
        if (!silent)
        {
            isLoading = true;
        }

        try
        {
            workflow = await WorkflowApi.GetWorkflowAsync(Id);
            lastRefresh = DateTime.Now;

            // Parse stage progress if available
            if (workflow?.WorkflowType == WorkflowType.ArchiveOnly &&
                workflow.Metadata.ContainsKey("stageProgress"))
            {
                try
                {
                    var stageProgressJson = workflow.Metadata["stageProgress"];
                    stageProgress = System.Text.Json.JsonSerializer.Deserialize<List<StageProgressModel>>(stageProgressJson);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error parsing stage progress: {ex.Message}");
                    stageProgress = null;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading workflow: {ex.Message}");
        }
        finally
        {
            if (!silent)
            {
                isLoading = false;
            }
        }
    }

    private async Task RefreshWorkflow()
    {
        await LoadWorkflow();
    }

    private async Task StartWorkflow()
    {
        isStartingWorkflow = true;
        try
        {
            workflow = await WorkflowApi.StartWorkflowAsync(Id);

            // Immediately start auto-refresh after starting
            StopAutoRefresh();
            StartAutoRefresh();

            // Show success feedback
            await LoadWorkflow(silent: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting workflow: {ex.Message}");
            // You could add error display here
        }
        finally
        {
            isStartingWorkflow = false;
        }
    }

    private async Task HandleExternalEvent()
    {
        if (string.IsNullOrEmpty(selectedEventType) || workflow == null)
            return;

        isProcessingEvent = true;
        try
        {
            var eventData = new Dictionary<string, object>();
            if (!string.IsNullOrWhiteSpace(eventDataJson) && eventDataJson != "{}")
            {
                eventData = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(eventDataJson)
                           ?? new Dictionary<string, object>();
            }

            var eventRequest = new ExternalEventRequest
            {
                EventType = selectedEventType,
                Data = eventData
            };

            workflow = await WorkflowApi.HandleExternalEventAsync(Id, eventRequest);
            showEventModal = false;
            selectedEventType = "";
            eventDataJson = "{}";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling external event: {ex.Message}");
        }
        finally
        {
            isProcessingEvent = false;
        }
    }

    private bool CanHandleExternalEvents(WorkflowResponse workflow)
    {
        return workflow.CurrentState switch
        {
            WorkflowState.AwaitingReview or WorkflowState.WaitingForDeployment or
            WorkflowState.WaitingAfter80Percent => true,
            _ => false
        };
    }

    private string GetStateBadgeClass(WorkflowState state) => state switch
    {
        WorkflowState.Created => "bg-secondary",
        WorkflowState.InProgress or WorkflowState.ReducingTo80Percent or WorkflowState.ReducingToZero or
        WorkflowState.Archiving or WorkflowState.CreatingPR or WorkflowState.Merging or WorkflowState.Transforming => "bg-primary",
        WorkflowState.Waiting or WorkflowState.WaitingAfter80Percent or WorkflowState.AwaitingReview or
        WorkflowState.WaitingForDeployment => "bg-warning",
        WorkflowState.Completed => "bg-success",
        WorkflowState.Failed => "bg-danger",
        _ => "bg-secondary"
    };

    private string GetProgressBarClass(WorkflowState state) => state switch
    {
        WorkflowState.Completed => "bg-success",
        WorkflowState.Failed => "bg-danger",
        WorkflowState.Waiting or WorkflowState.WaitingAfter80Percent or WorkflowState.AwaitingReview or
        WorkflowState.WaitingForDeployment => "bg-warning",
        _ => "bg-primary"
    };

    private string GetStageTimelineClass(string status) => status switch
    {
        "Completed" => "completed",
        "ReducingTraffic" or "Waiting" => "active",
        "Failed" => "failed",
        _ => ""
    };

    private string GetStageBadgeClass(string status) => status switch
    {
        "Completed" => "bg-success",
        "ReducingTraffic" => "bg-primary",
        "Waiting" => "bg-warning text-dark",
        "Failed" => "bg-danger",
        "Pending" => "bg-secondary",
        _ => "bg-light text-dark"
    };

    private string GetStageStatusText(string status) => status switch
    {
        "Pending" => "Pending",
        "ReducingTraffic" => "Reducing Traffic",
        "Waiting" => "Waiting",
        "Completed" => "Completed",
        "Failed" => "Failed",
        _ => status
    };

    private string GetStageProgressBarClass(string status) => status switch
    {
        "ReducingTraffic" => "bg-primary",
        "Waiting" => "bg-warning",
        _ => "bg-secondary"
    };

    private double GetStageProgressPercentage(StageProgressModel stage)
    {
        if (stage.Status == "ReducingTraffic")
        {
            // Calculate progress based on traffic reduction
            var totalReduction = stage.TargetAllocationPercentage - stage.CurrentAllocationPercentage;
            if (totalReduction == 0) return 100;

            // This is simplified - in real implementation, you'd track actual current percentage
            return 50; // Assume 50% through the reduction
        }
        else if (stage.Status == "Waiting")
        {
            // Calculate progress based on wait time
            if (stage.WaitStartTime.HasValue)
            {
                var elapsed = DateTime.UtcNow - stage.WaitStartTime.Value;
                var progress = (elapsed.TotalMilliseconds / stage.WaitDuration.TotalMilliseconds) * 100;
                return Math.Min(progress, 100);
            }
        }

        return 0;
    }

    private string GetStageProgressText(StageProgressModel stage)
    {
        if (stage.Status == "ReducingTraffic")
        {
            return "Reducing traffic allocation...";
        }
        else if (stage.Status == "Waiting" && stage.WaitStartTime.HasValue)
        {
            var elapsed = DateTime.UtcNow - stage.WaitStartTime.Value;
            var remaining = stage.WaitDuration - elapsed;

            if (remaining.TotalSeconds > 0)
            {
                return $"Waiting - {FormatDuration(remaining)} remaining";
            }
            else
            {
                return "Wait period completed";
            }
        }

        return "";
    }

    private string FormatDuration(TimeSpan duration)
    {
        if (duration.TotalDays >= 1)
        {
            return $"{(int)duration.TotalDays}d {duration.Hours}h";
        }
        else if (duration.TotalHours >= 1)
        {
            return $"{(int)duration.TotalHours}h {duration.Minutes}m";
        }
        else
        {
            return $"{(int)duration.TotalMinutes}m";
        }
    }

    public class StageProgressModel
    {
        public string Name { get; set; } = "";
        public string Status { get; set; } = "";
        public int CurrentAllocationPercentage { get; set; }
        public int TargetAllocationPercentage { get; set; }
        public DateTime? StartedAt { get; set; }
        public DateTime? CompletedAt { get; set; }
        public DateTime? WaitStartTime { get; set; }
        public TimeSpan WaitDuration { get; set; }
        public string? ErrorMessage { get; set; }
    }
}